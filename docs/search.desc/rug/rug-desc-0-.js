searchState.loadedDescShard("rug", 0, "Arbitrary-precision numbers\nAssigns to a number from another value.\nCompletes an incomplete-computation value.\nThe type of the completed operation.\nA multi-precision complex number with arbitrarily large …\nA multi-precision floating-point number with arbitrarily …\nAn arbitrary-precision integer.\nNegative one (−1).\nNegative one (−1).\nOne.\nOne.\nAn arbitrary-precision rational number.\nZero.\nZero.\nComputes the absolute value.\nComputes the absolute value.\nComputes the absolute value.\nComputes the absolute value, rounding to the nearest.\nComputes the absolute value.\nComputes the absolute value.\nComputes the absolute value.\nComputes the absolute value, rounding to the nearest.\nComputes the absolute value.\nComputes the absolute value.\nComputes the absolute value.\nComputes the absolute value.\nComputes the absolute value, applying the specified …\nComputes the arc-cosine, rounding to the nearest.\nComputes the inverse cosine, rounding to the nearest.\nComputes the arc-cosine, rounding to the nearest.\nComputes the inverse cosine, rounding to the nearest.\nComputes the arc-cosine then divides by π, rounding to …\nComputes the arc-cosine then divides by π, rounding to …\nComputes the arc-cosine then divides by π.\nComputes the arc-cosine then divides by π, applying the …\nComputes the arc-cosine.\nComputes the inverse cosine.\nComputes the arc-cosine, applying the specified rounding …\nComputes the inverse cosine, applying the specified …\nComputes the arc-cosine then divides by 2π/u, rounding to …\nComputes the arc-cosine then divides by 2π/u, rounding to …\nComputes the arc-cosine then divides by 2π/u.\nComputes the arc-cosine then divides by 2π/u, applying the\nComputes the inverse hyperbolic cosine, rounding to the …\nComputes the inverse hyperbolic cosine, rounding to the …\nComputes the inverse hyperbolic cosine, rounding to the …\nComputes the inverse hyperbolic cosine, rounding to the …\nComputes the inverse hyperbolic cosine\nComputes the inverse hyperbolic cosine.\nComputes the inverse hyperbolic cosine, applying the …\nComputes the inverse hyperbolic cosine, applying the …\nComputes the arithmetic-geometric mean of <code>self</code> and <code>other</code>, …\nComputes the arithmetic-geometric mean of <code>self</code> and <code>other</code>, …\nComputes the arithmetic-geometric mean of <code>self</code> and <code>other</code>, …\nComputes the arithmetic-geometric mean of <code>self</code> and <code>other</code>, …\nComputes the arithmetic-geometric mean.\nComputes the arithmetic-geometric mean.\nComputes the arithmetic-geometric mean of <code>self</code> and <code>other</code>, …\nComputes the arithmetic-geometric mean of <code>self</code> and <code>other</code>, …\nComputes the value of the Airy function Ai on <code>self</code>, …\nComputes the value of the Airy function Ai on <code>self</code>, …\nComputes the Airy function Ai on the value.\nComputes the value of the Airy function Ai on <code>self</code>, …\nComputes the argument, rounding to the nearest.\nComputes the argument, rounding to the nearest.\nComputes the argument.\nComputes the argument, applying the specified rounding …\nBorrows an absolute copy of the <code>Integer</code>.\nBorrows an absolute copy of the <code>Rational</code> number.\nBorrows an absolute copy of the <code>Float</code>.\nBorrows a copy of the <code>Float</code> as a <code>Complex</code> number.\nBorrows a conjugate copy of the <code>Complex</code> number.\nExtracts a slice of limbs used to store the value.\nBorrows a rotated copy of the <code>Complex</code> number.\nBorrows the numerator and denominator mutably without …\nBorrows the real and imaginary parts mutably.\nBorrows a negated copy of the <code>Integer</code>.\nBorrows a negated copy of the <code>Rational</code> number.\nBorrows a negated copy of the <code>Float</code>.\nBorrows a negated copy of the <code>Complex</code> number.\nBorrows the <code>Float</code> as an ordered floating-point number of …\nBorrows the <code>Complex</code> number as an ordered complex number of …\nBorrows a copy of the <code>Integer</code> as a <code>Rational</code> number.\nReturns a pointer to the inner GMP integer.\nReturns a pointer to the inner GMP rational number.\nReturns a pointer to the inner MPFR floating-point number.\nReturns a pointer to the inner MPC complex number.\nReturns an unsafe mutable pointer to the inner GMP integer.\nReturns an unsafe mutable pointer to the inner GMP rational\nReturns an unsafe mutable pointer to the inner MPFR …\nReturns an unsafe mutable pointer to the inner MPC complex …\nBorrows a reciprocal copy of the <code>Rational</code> number.\nComputes the arc-sine, rounding to the nearest.\nComputes the inverse sine, rounding to the nearest.\nComputes the arc-sine, rounding to the nearest.\nComputes the inverse sine, rounding to the nearest.\nComputes the arc-sine then divides by π, rounding to the …\nComputes the arc-sine then divides by π, rounding to the …\nComputes the arc-sine then divides by π.\nComputes the arc-sine then divides by π, applying the …\nComputes the arc-sine.\nComputes the inverse sine.\nComputes the arc-sine, applying the specified rounding …\nComputes the inverse sine, applying the specified rounding …\nComputes the arc-sine then divides by 2π/u, rounding to …\nComputes the arc-sine then divides by 2π/u, rounding to …\nComputes the arc-sine then divides by 2π/u.\nComputes the arc-sine then divides by 2π/u, applying the …\nComputes the inverse hyperbolic sine, rounding to the …\nComputes the inverse hyperbolic sine, rounding to the …\nComputes the inverse hyperbolic sine, rounding to the …\nComputes the inverse hyperbolic sine, rounding to the …\nComputes the inverse hyperbolic sine.\nComputes the inverse hyperboic sine.\nComputes the inverse hyperbolic sine, applying the …\nComputes the inverse hyperbolic sine, applying the …\nPeforms the assignement.\nAssigns from bytes in the given radix.\nAssigns to the numerator and denominator without …\nAssigns from a slice of digits of type <code>T</code>, where <code>T</code> can be …\nAssigns from digits of type <code>T</code> in a memory area, where <code>T</code> …\nAssigns from an <code>f32</code> if it is finite, rounding towards zero.\nAssigns from an <code>f32</code> if it is finite, losing no precision.\nAssigns from an <code>f64</code> if it is finite, rounding towards zero.\nAssigns from an <code>f64</code> if it is finite, losing no precision.\nComputes the arc-tangent, rounding to the nearest.\nComputes the inverse tangent, rounding to the nearest.\nComputes the arc-tangent2 of <code>self</code> and <code>x</code>, rounding to the …\nComputes the arc-tangent2 of <code>self</code> and <code>x</code>, rounding to the …\nComputes the arc-tangent2 of <code>self</code> and <code>x</code> then divides by …\nComputes the arc-tangent2 of <code>self</code> and <code>x</code> then divides by …\nComputes the arc-tangent2 then divides by π.\nComputes the arc-tangent2 of <code>self</code> and <code>x</code> then divides by …\nComputes the arc-tangent2.\nComputes the arc-tangent2 of <code>self</code> and <code>x</code>, applying the …\nComputes the arc-tangent2 of <code>self</code> and <code>x</code> then divides by …\nComputes the arc-tangent2 of <code>self</code> and <code>x</code> then divides by …\nComputes the arc-tangent2 then divides by 2π/u.\nComputes the arc-tangent2 of <code>self</code> and <code>x</code> then divides by …\nComputes the arc-tangent, rounding to the nearest.\nComputes the inverse tangent, rounding to the nearest.\nComputes the arc-tangent then divides by π, rounding to …\nComputes the arc-tangent then divides by π, rounding to …\nComputes the arc-tangent then divides by π.\nComputes the arc-tangent then divides by π, applying the …\nComputes the arc-tangent.\nComputes the inverse tangent.\nComputes the arc-tangent, applying the specified rounding …\nComputes the inverse tangent, applying the specified …\nComputes the arc-tangent then divides by 2π/u, rounding …\nComputes the arc-tangent then divides by 2π/u, rounding …\nComputes the arc-tangent then divides by 2π/u.\nComputes the arc-tangent then divides by 2π/u, applying …\nComputes the inverse hyperbolic tangent, rounding to the …\nComputes the inverse hyperbolic tangent, rounding to the …\nComputes the inverse hyperbolic tangent, rounding to the …\nComputes the inverse hyperbolic tangent, rounding to the …\nComputes the inverse hyperbolic tangent.\nComputes the inverse hyperbolic tangent.\nComputes the inverse hyperbolic tangent, applying the …\nComputes the inverse hyperbolic tangent, applying the …\nComputes the binomial coefficient over k.\nComputes the binomial coefficient over k.\nComputes the binomial coefficient over k.\nComputes the binomial coefficient n over k.\nBorrows a pair of <code>Float</code> references as a <code>Complex</code> number.\nReturns the capacity in bits that can be stored without …\nComputes the cube root, rounding to the nearest.\nComputes the cube root, rounding to the nearest.\nComputes the cube root.\nComputes the cube root, applying the specified rounding …\nRounds the number upwards (towards plus infinity).\nRounds up to the next higher integer.\nRounds the number upwards (towards plus infinity).\nRounds up to the next higher integer.\nRounds the number upwards (towards plus infinity).\nRounds up to the next higher integer. The result may be …\nClamps the value within the specified bounds.\nClamps the value within the specified bounds.\nClamps the value within the specified bounds, rounding to …\nClamps the exponent of a <code>Float</code> within a specified range if …\nClamps the value within the specified bounds.\nClamps the value within the specified bounds.\nClamps the value within the specified bounds, rounding to …\nClamps the value within the specified bounds.\nClamps the value within the specified bounds.\nClamps the value within the specified bounds.\nClamps the value within the specified bounds, applying the …\nReturns the floating-point category of the number. Note …\nReturns the same result as self.cmp(&amp;0.into()), but is …\nReturns the same result as self.cmp(&amp;0.into()), but is …\nReturns the same result as self.partial_cmp(&amp;0), but is …\nCompares the absolute values.\nCompares the absolute values.\nCompares the absolute values of <code>self</code> and <code>other</code>.\nCompares the absolute values of <code>self</code> and <code>other</code>.\nCompletes the operation.\nCompletes the operation and stores the result in a target.\nMulti-precision complex numbers with correct rounding.\nComputes (1 + <code>self</code>) to the power of <code>n</code>, rounding to the …\nComputes (1 + <code>self</code>) to the power of <code>n</code>, rounding to the …\nComputes (1 + <code>self</code>) to the power of <code>n</code>.\nComputes (1 + <code>self</code>) to the power of <code>n</code>, applying the …\nComputes the complex conjugate.\nComputes the complex conjugate.\nComputes the complex conjugate.\nReturns a number with the magnitude of <code>self</code> and the sign …\nRetains the magnitude of <code>self</code> and copies the sign of <code>y</code>.\nComputes a number with the magnitude of <code>self</code> and the sign …\nComputes the cosine, rounding to the nearest.\nComputes the cosine, rounding to the nearest.\nComputes the cosine, rounding to the nearest.\nComputes the cosine, rounding to the nearest.\nComputes the cosine of π × <code>self</code>, rounding to the …\nComputes the cosine of π × <code>self</code>, rounding to the …\nComputes the cosine of π × <code>self</code>.\nComputes the cosine of π × <code>self</code>, applying the specified\nComputes the cosine.\nComputes the cosine.\nComputes the cosine, applying the specified rounding …\nComputes the cosine, applying the specified rounding …\nComputes the cosine of (2π/u) × <code>self</code>, rounding to the …\nComputes the cosine of (2π/u) × <code>self</code>, rounding to the …\nComputes the cosine of (2π/u) × <code>self</code>.\nComputes the cosine of (2π/u) × <code>self</code>, applying the …\nComputes the hyperbolic cosine, rounding to the nearest.\nComputes the hyperbolic cosine, rounding to the nearest.\nComputes the hyperbolic cosine, rounding to the nearest.\nComputes the hyperbolic cosine, rounding to the nearest.\nComputes the hyperbolic cosine.\nComputes the hyperbolic cosine.\nComputes the hyperbolic cosine, applying the specified …\nComputes the hyperbolic cosine, applying the specified …\nComputes the cotangent, rounding to the nearest.\nComputes the cotangent, rounding to the nearest.\nComputes the cotangent.\nComputes the cotangent, applying the specified rounding …\nComputes the hyperbolic cotangent, rounding to the nearest.\nComputes the hyperbolic cotangent, rounding to the nearest.\nComputes the hyperbolic cotangent.\nComputes the hyperbolic cotangent, applying the specified …\nReturns the number of one bits if the value ≥ 0.\nReturns the number of zero bits if the value &lt; 0.\nComputes the cosecant, rounding to the nearest.\nComputes the cosecant, rounding to the nearest.\nComputes the cosecant.\nComputes the cosecant, applying the specified rounding …\nComputes the hyperbolic cosecant, rounding to the nearest.\nComputes the hyperbolic cosecant, rounding to the nearest.\nComputes the hyperbolic cosecant.\nComputes the hyperbolic cosecant, applying the specified …\nBorrows the denominator as an <code>Integer</code>.\nComputes the value of the Digamma function on <code>self</code>, …\nComputes the value of the Digamma function on <code>self</code>, …\nComputes the Digamma function on the value.\nComputes the value of the Digamma function on <code>self</code>, …\nPerforms an exact division.\nPerforms an exact division <code>dividend</code> / <code>self</code>.\nPerforms an exact division.\nPerforms an exact division.\nPerforms an exact division.\nPerforms an exact division.\nPerforms an exact division.\nPerforms a division producing both the quotient and …\nPerforms a division producing both the quotient and …\nPerforms a division producing both the quotient and …\nPerforms a division producing both the quotient and …\nPerforms Euclidean division producing both the quotient …\nPerforms Euclidean division producing both the quotient …\nPerforms Euclidan division producing both the quotient and …\nPerforms a division producing both the quotient and …\nPerforms a division producing both the quotient and …\nPerforms a division producing both the quotient and …\nPerforms a division producing both the quotient and …\nPerforms a division producing both the quotient and …\nPerforms a division producing both the quotient and …\nPerforms a division producing both the quotient and …\nPerforms a division producing both the quotient and …\nFinds the dot product of a list of <code>Integer</code> value pairs.\nFinds the dot product of a list of <code>Rational</code> value pairs.\nFinds the dot product of a list of <code>Float</code> value pairs with …\nFinds the dot product of a list of <code>Complex</code> numbers pairs …\nComputes the exponential integral, rounding to the nearest.\nComputes the exponential integral, rounding to the nearest.\nComputes the exponential integral.\nComputes the exponential integral, applying the specified …\nThis method has been renamed to <code>is_zero</code>.\nComputes the value of the error function, rounding to the …\nComputes the value of the error function, rounding to the …\nComputes the error function.\nComputes the value of the error function, applying the …\nComputes the value of the complementary error function, …\nComputes the value of the complementary error function, …\nComputes the complementary error function.\nComputes the value of the complementary error function, …\nComputes the exponential, rounding to the nearest.\nComputes the exponential, rounding to the nearest.\nComputes 10 to the power of <code>self</code>, rounding to the nearest.\nSubtracts one from 10 to the power of <code>self</code>, rounding to …\nSubtracts one from 10 to the power of <code>self</code>, rounding to …\nComputes one less than 10 to the power of the value.\nSubtracts one from 10 to the power of <code>self</code>, applying the …\nComputes 10 to the power of <code>self</code>, rounding to the nearest.\nComputes 10 to the power of the value.\nComputes 10 to the power of <code>self</code>, applying the specified …\nComputes 2 to the power of <code>self</code>, rounding to the nearest.\nSubtracts one from 2 to the power of <code>self</code>, rounding to the …\nSubtracts one from 2 to the power of <code>self</code>, rounding to the …\nComputes one less than 2 to the power of the value.\nSubtracts one from 2 to the power of <code>self</code>, applying the …\nComputes 2 to the power of <code>self</code>, rounding to the nearest.\nComputes 2 to the power of the value.\nComputes 2 to the power of <code>self</code>, applying the specified …\nSubtracts one from the exponential of <code>self</code>, rounding to …\nSubtracts one from the exponential of <code>self</code>, rounding to …\nComputes one less than the exponential of the value.\nSubtracts one from the exponential of <code>self</code>, applying the …\nComputes the exponential, rounding to the nearest.\nComputes the exponential, rounding to the nearest.\nComputes the exponential.\nComputes the exponential.\nComputes the exponential, applying the specified rounding …\nComputes the exponential, applying the specified rounding …\nFinds the greatest common divisor (GCD) of the two inputs (…\nFinds the greatest common divisor (GCD) of the two inputs (…\nFinds the greatest common divisor (GCD) of the two inputs (…\nComputes the factorial of n.\nComputes the factorial of n.\nComputes the double factorial of n.\nComputes the m-multi factorial of n.\nComputes the Fibonacci number.\nComputes a Fibonacci number, and the previous Fibonacci …\nReturns the location of the first one, starting at <code>start</code>. …\nReturns the location of the first zero, starting at <code>start</code>. …\nMulti-precision floating-point numbers with correct …\nRounds the number downwards (towards minus infinity).\nRounds down to the next lower integer.\nRounds the number downwards (towards minus infinity).\nRounds down to the next lower integer.\nRounds the number downwards (towards minus infinity).\nRounds down to the next lower integer. The result may be …\nGets the fractional part of the number.\nComputes the fractional and ceil parts of the number.\nComputes the fractional and ceil parts of the number.\nComputes the fractional and ceil parts of the number.\nComputes the fractional and floor parts of the number.\nComputes the fractional and floor parts of the number.\nComputes the fractional and floor parts of the number.\nGets the fractional part of the number.\nGets the fractional part of the number.\nComputes the fractional and rounded parts of the number.\nComputes the fractional and round parts of the number.\nComputes the fractional and round parts of the number.\nComputes the fractional and truncated parts of the number.\nComputes the fractional and truncated parts of the number.\nComputes the fractional and truncated parts of the number.\nDecomposes number into significand and exponent, rounding …\nDecomposes number into significand and exponent, rounding …\nDecomposes number into significand and exponent.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Rational</code> number from a numerator and …\nCreates an <code>Integer</code> from a slice of digits of type <code>T</code>, where …\nCreates an <code>Integer</code> from an <code>f32</code> if it is finite, rounding …\nCreates a <code>Rational</code> number from an <code>f32</code> if it is finite, …\nCreates an <code>Integer</code> from an <code>f64</code> if it is finite, rounding …\nCreates a <code>Rational</code> number from an <code>f64</code> if it is finite, …\nCreates an <code>Integer</code> from an initialized GMP integer.\nCreates a <code>Rational</code> number from an initialized GMP rational …\nCreates a <code>Float</code> from an initialized MPFR floating-point …\nCreates a <code>Complex</code> number from an initialized MPC complex …\nParses an <code>Integer</code> using the given radix.\nParses a <code>Rational</code> number.\nComputes the value of the gamma function on <code>self</code>, rounding …\nComputes the value of the upper incomplete gamma function …\nComputes the value of the upper incomplete gamma function …\nComputes the upper incomplete gamma function on the value.\nComputes the value of the upper incomplete gamma function …\nComputes the value of the gamma function on <code>self</code>, rounding …\nComputes the gamma function on the value.\nComputes the value of the gamma function on <code>self</code>, applying …\nFinds the greatest common divisor.\nThis method has been renamed to <code>extended_gcd</code>.\nThis method has been renamed to <code>extended_gcd_mut</code>.\nThis method has been renamed to <code>extended_gcd_ref</code>.\nFinds the greatest common divisor.\nFinds the greatest common divisor.\nFinds the greatest common divisor.\nFinds the greatest common divisor.\nFinds the greatest common divisor.\nReturns <code>true</code> if the bit at location <code>index</code> is 1 or <code>false</code> if …\nIf the value is a normal number, returns its exponent.\nIf the value is a normal number, returns a reference to …\nRetuns the Hamming distance if the two numbers have the …\nComputes the Euclidean norm of <code>self</code> and <code>other</code>, rounding to …\nComputes the Euclidean norm of <code>self</code> and <code>other</code>, rounding to …\nComputes the Euclidean norm.\nComputes the Euclidean norm of <code>self</code> and <code>other</code>, applying the\nMultiplies <code>i</code> by 2<code>exp</code>.\nRaises <code>base</code> to the power of <code>exponent</code>.\nRaises <code>base</code> to the power of <code>exponent</code>.\nBorrows the imaginary part as a <code>Float</code>.\nArbitrary-precision integers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts into numerator and denominator <code>Integer</code> values.\nConverts an <code>Integer</code> into a GMP integer.\nConverts a <code>Rational</code> number into a GMP rational number.\nConverts a <code>Float</code> into an MPFR floating-point number.\nConverts a <code>Complex</code> number into an MPC complex number.\nConsumes and converts the value into real and imaginary …\nFinds the inverse modulo <code>modulo</code> and returns <code>Ok(inverse)</code> if …\nFinds the inverse modulo <code>modulo</code> if an inverse exists.\nFinds the inverse modulo <code>modulo</code> if an inverse exists.\nReturns <code>true</code> if the number is congruent to c mod divisor, …\nReturns <code>true</code> if the number is congruent to c mod 2b, that …\nReturns <code>true</code> if the number is congruent to c mod divisor, …\nReturns <code>true</code> if the number is divisible by <code>divisor</code>. Unlike …\nReturns <code>true</code> if the number is divisible by 2b.\nReturns <code>true</code> if the number is divisible by <code>divisor</code>. Unlike …\nReturns <code>true</code> if the number is even.\nReturns <code>true</code> if <code>self</code> is a finite number, that is neither …\nReturns <code>true</code> if <code>self</code> is plus or minus infinity.\nReturns <code>true</code> if the number is an integer.\nReturns <code>true</code> if <code>self</code> is an integer.\nReturns <code>true</code> if <code>self</code> is not a number.\nReturns <code>true</code> if the number is negative and <code>false</code> if the …\nReturns <code>true</code> if the number is negative and <code>false</code> if the …\nReturns <code>true</code> if <code>self</code> is a normal number, that is neither …\nReturns <code>true</code> if the number is odd.\nReturns <code>true</code> if the number is a perfect power.\nReturns <code>true</code> if the number is a perfect square.\nReturns <code>true</code> if the number is positive and <code>false</code> if the …\nReturns <code>true</code> if the number is positive and <code>false</code> if the …\nReturns <code>true</code> if the number is a power of two.\nDetermines wheter a number is prime.\nReturns <code>true</code> if the value is negative, −0 or NaN with a …\nReturns <code>true</code> if the value is positive, +0 or NaN without a …\nReturns <code>true</code> if the number is zero.\nReturns <code>true</code> if the number is zero.\nReturns <code>true</code> if <code>self</code> is plus or minus zero.\nReturns <code>true</code> if both the real and imaginary parts are plus …\nComputes the value of the first kind Bessel function of …\nComputes the value of the first kind Bessel function of …\nComputes the first kind Bessel function of order 0.\nComputes the value of the first kind Bessel function of …\nComputes the value of the first kind Bessel function of …\nComputes the value of the first kind Bessel function of …\nComputes the first kind Bessel function of order 1.\nComputes the value of the first kind Bessel function of …\nCalculates the Jacobi symbol (<code>self</code>/n).\nComputes the value of the first kind Bessel function of …\nComputes the value of the first kind Bessel function of …\nComputes the first kind Bessel function of order n.\nComputes the value of the first kind Bessel function of …\nKeeps the n least significant bits only, producing a …\nKeeps the n least significant bits only, producing a …\nKeeps the n least significant bits only, producing a …\nKeeps the n least significant bits only, producing a …\nKeeps the n least significant bits only, producing a …\nKeeps the n least significant bits only, producing a …\nCalculates the Jacobi symbol (<code>self</code>/n) with the Kronecker …\nFinds the least common multiple.\nFinds the least common multiple.\nFinds the least common multiple.\nFinds the least common multiple.\nFinds the least common multiple.\nFinds the least common multiple.\nCalculates the Legendre symbol (<code>self</code>/p).\nComputes the real part of the dilogarithm of <code>self</code>, …\nComputes the real part of the dilogarithm of <code>self</code>, …\nComputes the real part of the dilogarithm of the value.\nComputes the real part of the dilogarithm of <code>self</code>, …\nComputes the natural logarithm, rounding to the nearest.\nComputes the natural logarithm, rounding to the nearest.\nComputes the natural logarithm of one plus <code>self</code>, rounding …\nComputes the natural logarithm of one plus <code>self</code>, rounding …\nComputes the natural logorithm of one plus the value.\nComputes the natural logarithm of one plus <code>self</code>, applying …\nComputes the logarithm of the absolute value of the gamma …\nComputes the logarithm of the absolute value of the gamma …\nComputes the logarithm of the absolute value of the gamma …\nComputes the logarithm of the absolute value of the gamma …\nComputes the logarithm of the gamma function on <code>self</code>, …\nComputes the logarithm of the gamma function on <code>self</code>, …\nComputes the logarithm of the gamma function on the value.\nComputes the logarithm of the gamma function on <code>self</code>, …\nComputes the natural logarithm, rounding to the nearest.\nComputes the natural logarithm, rounding to the nearest.\nComputes the natural logarithm.\nComputes the natural logarithm.\nComputes the natural logarithm, applying the specified …\nComputes the natural logarithm, applying the specified …\nComputes the natural logarithm of <code>u</code>.\nComputes the logarithm to base 10, rounding to the nearest.\nComputes the logarithm to base 10, rounding to the nearest.\nComputes the logarithm to base 10 of one plus <code>self</code>, …\nComputes the logarithm to base 10 of one plus <code>self</code>, …\nComputes the logorithm to base 10 of one plus the value.\nComputes the logarithm to base 10 of one plus <code>self</code>, …\nComputes the logarithm to base 10, rounding to the nearest.\nComputes the logarithm to base 10, rounding to the nearest.\nComputes the logarithm to base 10.\nComputes the logarithm to base 10.\nComputes the logarithm to base 10, applying the specified …\nComputes the logarithm to base 10, applying the specified …\nComputes the logarithm to base 2, rounding to the nearest.\nComputes the logarithm to base 2 of one plus <code>self</code>, …\nComputes the logarithm to base 2 of one plus <code>self</code>, …\nComputes the logorithm to base 2 of one plus the value.\nComputes the logarithm to base 2 of one plus <code>self</code>, …\nComputes the logarithm to base 2, rounding to the nearest.\nComputes the logarithm to base 2.\nComputes the logarithm to base 2, applying the specified …\nComputes the Lucas number.\nComputes a Lucas number, and the previous Lucas number.\nFinds the maximum, rounding to the nearest.\nFinds the maximum, rounding to the nearest.\nFinds the maximum.\nFinds the maximum, applying the specified rounding method.\nFinds the minimum, rounding to the nearest.\nFinds the minimum, rounding to the nearest.\nFinds the minimum.\nFinds the minimum, applying the specified rounding method.\nReturns the modulo, or the remainder of Euclidean division …\nFinds the modulus, or the remainder of Euclidean division.\nFinds the modulus, or the remainder of Euclidean division …\nFinds the modulus, or the remainder of Euclidean division.\nFinds the modulus, or the remainder of Euclidean division.\nMultiplies and adds in one fused operation, rounding to …\nMultiplies and adds in one fused operation, rounding to …\nMultiplies two products and adds them in one fused …\nMultiplies two products and adds them in one fused …\nMultiplies two products and adds them in one fused …\nMultiplies two produces and adds them in one fused …\nMultiplies and adds in one fused operation, rounding to …\nMultiplies and adds in one fused operation, rounding to …\nMultiplies and adds in one fused operation.\nMultiplies and adds in one fused operation.\nMultiplies and adds in one fused operation, applying the …\nMultiplies and adds in one fused operation, applying the …\nMultiplies the complex number by ±i, rounding to the …\nMultiplies the complex number by ±i, rounding to the …\nMultiplies the complex number by ±i.\nMultiplies the complex number by ±i, applying the …\nMultiplies and subtracts in one fused operation, rounding …\nMultiplies and subtracts in one fused operation, rounding …\nMultiplies two products and subtracts them in one fused …\nMultiplies two products and subtracts them in one fused …\nMultiplies two products and subtracts them in one fused …\nMultiplies two produces and subtracts them in one fused …\nMultiplies and subtracts in one fused operation, rounding …\nMultiplies and subtracts in one fused operation, rounding …\nMultiplies and subtracts in one fused operation.\nMultiplies and subtracts in one fused operation.\nMultiplies and subtracts in one fused operation, applying …\nMultiplies and subtracts in one fused operation, applying …\nBorrows the imaginary part mutably.\nBorrows the real part mutably.\nCalls a function with mutable references to the numerator …\nCalls a function with a pair of <code>Float</code> mutable references …\nConstructs a new arbitrary-precision <code>Integer</code> with value 0.\nConstructs a new arbitrary-precision <code>Rational</code> number with …\nCreate a new <code>Float</code> with the specified precision and with …\nCreate a new <code>Complex</code> number with the specified precisions …\nCreate a new <code>Float</code> with the specified precision and with …\nCreate a new <code>Complex</code> number with the specified precisions …\nSets to the next value towards −∞.\nFinds the next power of two, or 1 if the number ≤ 0.\nFinds the next power of two, or 1 if the number ≤ 0.\nFinds the next power of two, or 1 if the number ≤ 0.\nIdentifies primes using a probabilistic algorithm; the …\nIdentifies primes using a probabilistic algorithm; the …\nIdentifies primes using a probabilistic algorithm; the …\nSets to the next value towards <code>to</code>.\nSets to the next value towards +∞.\nComputes the norm, that is the square of the absolute …\nComputes the norm, that is the square of the absolute …\nComputes the norm, that is the square of the absolute …\nComputes the norm, that is the square of the absolute …\nBorrows the numerator as an <code>Integer</code>.\nOperations on numbers.\nParses a decimal string slice (&amp;str) or byte slice (&amp;[u8]) …\nParses a decimal string slice (&amp;str) or byte slice (&amp;[u8]) …\nParses a decimal string slice (&amp;str) or byte slice (&amp;[u8]) …\nParses a decimal string slice (&amp;str) or byte slice (&amp;[u8]) …\nParses a string slice (&amp;str) or byte slice (&amp;[u8]) into an …\nParses a string slice (&amp;str) or byte slice (&amp;[u8]) into a …\nParses a string slice (&amp;str) or byte slice (&amp;[u8]) into a …\nParses a string slice (&amp;str) or byte slice (&amp;[u8]) into a …\nComputes the positive difference between <code>self</code> and <code>other</code>, …\nComputes the positive difference between <code>self</code> and <code>other</code>, …\nComputes the positive difference.\nComputes the positive difference between <code>self</code> and <code>other</code>, …\nRaises a number to the power of <code>exponent</code> modulo <code>modulo</code> and …\nRaises a number to the power of <code>exponent</code> modulo <code>modulo</code> if …\nRaises a number to the power of <code>exponent</code> modulo <code>modulo</code> if …\nReturns the precision.\nReturns the precision of the real and imaginary parts.\nReturns the precision.\nReturns the precision of the real and imaginary parts.\nIdentifies previous prime number using a probabilistic …\nIdentifies previous prime number using a probabilistic …\nIdentifies previous prime number using a probabilistic …\nComputes the primorial of n.\nMultiplies a list of <code>Integer</code> values.\nMultiplies a list of <code>Rational</code> values.\nComputes a projection onto the Riemann sphere, rounding to …\nComputes a projection onto the Riemann sphere, rounding to …\nComputes the projection onto the Riemann sphere.\nRandom number generation.\nGenerates a non-negative random number below the given …\nGenerates a non-negative random number below the given …\nGenerates a non-negative random number below the given …\nGenerates a random number with a specified maximum number …\nGenerates a random number in the range 0 ≤ x &lt; 1.\nGenerates a random complex number with both the real and …\nGenerates a random number in the continuous range 0 ≤ x…\nGenerates a random complex number with both the real and …\nGenerates a random number according to an exponential …\nGenerates a random number according to a standard normal …\nArbitrary-precision rational numbers.\nBorrows the real part as a <code>Float</code>.\nComputes the reciprocal.\nComputes the reciprocal, rounding to the nearest.\nComputes the reciprocal, rounding to the nearest.\nComputes the reciprocal.\nComputes the reciprocal, rounding to the nearest.\nComputes the reciprocal, rounding to the nearest.\nComputes the reciprocal.\nComputes the reciprocal.\nComputes the reciprocal.\nComputes the reciprocal, applying the specified rounding …\nComputes the reciprocal, applying the specified rounding …\nComputes the reciprocal square root, rounding to the …\nComputes the reciprocal square root, rounding to the …\nComputes the reciprocal square root.\nComputes the reciprocal square root, applying the …\nComputes the non-positive remainder after rounding up.\nComputes the non-positive remainder after rounding up.\nComputes the non-positive remainder after rounding up.\nComputes the non-negative remainder after rounding down.\nComputes the non-negative remainder after rounding down.\nComputes the non-negative remainder after rounding down.\nComputes the remainder after rounding to the nearest …\nComputes the remainder after rounding to the nearest …\nComputes the remainder after rounding to the nearest …\nComputes the fractional part of the number.\nComputes the fractional part of the number.\nComputes the fractional part of the number.\nComputes the remainder, rounding to the nearest.\nComputes the remainder, rounding to the nearest.\nComputes the remainder, applying the specified rounding …\nComputes the remainder, rounding to the nearest.\nComputes the remainder and the 31 least significant bits …\nComputes the remainder and the 31 least significant bits …\nComputes the remainder and the 31 least significant bits …\nComputes the remainder and the 31 least significant bits …\nComputes the remainder and the 31 least significant bits …\nComputes the remainder and the 31 least significant bits …\nComputes the remainder.\nComputes the remainder, applying the specified rounding …\nRemoves all occurrences of <code>factor</code>, and returns the number …\nRemoves all occurrences of <code>factor</code>, and returns the number …\nRemoves all occurrences of <code>factor</code>, and counts the number of\nReserves capacity for at least <code>additional</code> more bits in the …\nComputes the nth root and truncates the result.\nComputes the kth root, rounding to the nearest.\nComputes the kth root, rounding to the nearest.\nComputes the kth root, rounding to the nearest.\nComputes the kth root.\nComputes the kth root, applying the specified rounding …\nComputes the nth root and truncates the result.\nComputes the kth root, rounding to the nearest.\nGenerates a root of unity, rounding to the nearest.\nComputes the nth root and truncates the result.\nComputes the kth root.\nComputes the nth root and returns the truncated root and …\nComputes the nth root and returns the truncated root and …\nComputes the nth root and returns the truncated root and …\nComputes the kth root, applying the specified rounding …\nRounds the number to the nearest integer.\nRounds to the nearest integer, rounding half-way cases …\nRounds to the nearest integer, rounding half-way cases to …\nRounds to the nearest integer, rounding half-way cases to …\nRounds to the nearest integer, rounding half-way cases to …\nRounds the number to the nearest integer.\nRounds to the nearest integer, rounding half-way cases …\nRounds the number to the nearest integer.\nRounds to the nearest integer, rounding half-way cases …\nComputes the secant, rounding to the nearest.\nComputes the secant, rounding to the nearest.\nComputes the secant.\nComputes the secant, applying the specified rounding …\nComputes the hyperbolic secant, rounding to the nearest.\nComputes the hyperbolic secant, rounding to the nearest.\nComputes the hyperbolic secant.\nComputes the hyperbolic secant, applying the specified …\nRaises a number to the power of <code>exponent</code> modulo <code>modulo</code>, …\nRaises a number to the power of <code>exponent</code> modulo <code>modulo</code>, …\nRaises a number to the power of <code>exponent</code> modulo <code>modulo</code>, …\nSets the bit at location <code>index</code> to 1 if <code>val</code> is <code>true</code> or 0 if …\nSets the precision, rounding to the nearest.\nSets the precision of the real and imaginary parts, …\nSets the precision, rounding to the nearest.\nSets the precision of the real and imaginary parts, …\nSets the precision, applying the specified rounding method.\nSets the precision of the real and imaginary parts, …\nSets the precision, applying the specified rounding method.\nSets the precision of the real and imaginary parts, …\nShrinks the capacity of the <code>Integer</code> with a lower bound in …\nShrinks the capacity of the <code>Integer</code> as much as possible.\nReturns the number of bits required to represent the value …\nReturns the number of bits required to represent the …\nReturns the number of digits of type <code>T</code> required to …\nComputes the signum.\nComputes the signum.\nComputes the signum.\nComputes the signum.\nComputes the signum.\nComputes the signum.\nComputes the signum.\nComputes the signum.\nComputes the signum.\nComputes the sine, rounding to the nearest.\nComputes the sine, rounding to the nearest.\nComputes the sine and cosine of <code>self</code>, rounding to the …\nComputes the sine and cosine of <code>self</code>, rounding to the …\nComputes the sine and cosine of <code>self</code>, rounding to the …\nComputes the sine and cosine of <code>self</code>, rounding to the …\nComputes the sine and cosine.\nComputes the sine and cosine.\nComputes the sine and cosine of <code>self</code>, applying the …\nComputes the sine and cosine of <code>self</code>, applying the …\nComputes the sine, rounding to the nearest.\nComputes the sine, rounding to the nearest.\nComputes the sine of π × <code>self</code>, rounding to the nearest.\nComputes the sine of π × <code>self</code>, rounding to the nearest.\nComputes the sine of π × <code>self</code>.\nComputes the sine of π × <code>self</code>, applying the specified …\nComputes the sine.\nComputes the sine.\nComputes the sine, applying the specified rounding method.\nComputes the sine, applying the specified rounding method.\nComputes the sine of (2π/u) × <code>self</code>, rounding to the …\nComputes the sine of (2π/u) × <code>self</code>, rounding to the …\nComputes the sine of (2π/u) × <code>self</code>.\nComputes the sine of (2π/u) × <code>self</code>, applying the …\nComputes the hyperbolic sine, rounding to the nearest.\nComputes the hyperbolic sine, rounding to the nearest.\nComputes the hyperbolic sine and cosine of <code>self</code>, rounding …\nComputes the hyperbolic sine and cosine of <code>self</code>, rounding …\nComputes the hyperbolic sine and cosine.\nComputes the hyperbolic sine and cosine of <code>self</code>, applying …\nComputes the hyperbolic sine, rounding to the nearest.\nComputes the hyperbolic sine, rounding to the nearest.\nComputes the hyperbolic sine.\nComputes the hyperbolic sine.\nComputes the hyperbolic sine, applying the specified …\nComputes the hyperbolic sine, applying the specified …\nComputes the square root and truncates the result.\nComputes the square root, rounding to the nearest.\nComputes the square root, rounding to the nearest.\nComputes the square root and truncates the result.\nComputes the square root, rounding to the nearest.\nComputes the square root, rounding to the nearest.\nComputes the square root and truncates the result.\nComputes the square root.\nComputes the square root.\nComputes the square root and the remainder.\nComputes the square root and the remainder.\nComputes the square root and the remainder.\nComputes the square root, applying the specified rounding …\nComputes the square root, applying the specified rounding …\nComputes the square root of <code>u</code>.\nComputes the square.\nComputes the square.\nComputes the square, rounding to the nearest.\nComputes the square, rounding to the nearest.\nComputes the square.\nComputes the square.\nComputes the square, rounding to the nearest.\nComputes the square, rounding to the nearest.\nComputes the square.\nComputes the square.\nComputes the square.\nComputes the square.\nComputes the square, applying the specified rounding …\nComputes the square, applying the specified rounding …\nEmulate subnormal numbers, rounding to the nearest.\nEmulate subnormal numbers for precisions specified in IEEE …\nEmulate subnormal numbers for precisions specified in IEEE …\nEmulate subnormal numbers, applying the specified rounding …\nAdds a list of <code>Integer</code> values.\nAdds a list of <code>Rational</code> values.\nAdds a list of <code>Float</code> values with correct rounding.\nAdds a list of <code>Complex</code> numbers with correct rounding.\nComputes the tangent, rounding to the nearest.\nComputes the tangent, rounding to the nearest.\nComputes the tangent, rounding to the nearest.\nComputes the tangent, rounding to the nearest.\nComputes the tangent of π × <code>self</code>, rounding to the …\nComputes the tangent of π × <code>self</code>, rounding to the …\nComputes the tangent of π × <code>self</code>.\nComputes the tangent of π × <code>self</code>, applying the …\nComputes the tangent.\nComputes the tangent.\nComputes the tangent, applying the specified rounding …\nComputes the tangent, applying the specified rounding …\nComputes the tangent of (2π/u) × <code>self</code>, rounding to the …\nComputes the tangent of (2π/u) × <code>self</code>, rounding to the …\nComputes the tangent of (2π/u) × <code>self</code>.\nComputes the tangent of (2π/u) × <code>self</code>, applying the …\nComputes the hyperbolic tangent, rounding to the nearest.\nComputes the hyperbolic tangent, rounding to the nearest.\nComputes the hyperbolic tangent, rounding to the nearest.\nComputes the hyperbolic tangent, rounding to the nearest.\nComputes the hyperbolic tangent.\nComputes the hyperbolic tangent.\nComputes the hyperbolic tangent, applying the specified …\nComputes the hyperbolic tangent, applying the specified …\nConverts the absolute value to a <code>Vec</code> of digits of type <code>T</code>, …\nConverts to an <code>f32</code>, rounding towards zero.\nConverts to an <code>f32</code>, rounding towards zero.\nConverts to an <code>f32</code>, rounding to the nearest.\nConverts to an <code>f32</code> and an exponent, rounding towards zero.\nConverts to an <code>f32</code> and an exponent, rounding to the …\nConverts to an <code>f32</code> and an exponent, applying the specified …\nConverts to an <code>f32</code>, applying the specified rounding method.\nConverts to an <code>f64</code>, rounding towards zero.\nConverts to an <code>f64</code>, rounding towards zero.\nConverts to an <code>f64</code>, rounding to the nearest.\nConverts to an <code>f64</code> and an exponent, rounding towards zero.\nConverts to an <code>f64</code> and an exponent, rounding to the …\nConverts to an <code>f64</code> and an exponent, applying the specified …\nConverts to an <code>f64</code>, applying the specified rounding method.\nConverts to an <code>i128</code> if the value fits.\nConverts to an <code>i128</code>, wrapping if the value does not fit.\nConverts to an <code>i16</code> if the value fits.\nConverts to an <code>i16</code>, wrapping if the value does not fit.\nConverts to an <code>i32</code> if the value fits.\nConverts to an <code>i32</code>, rounding to the nearest.\nConverts to an <code>i32</code>, applying the specified rounding method.\nConverts to an <code>i32</code>, wrapping if the value does not fit.\nConverts to an <code>i64</code> if the value fits.\nConverts to an <code>i64</code>, wrapping if the value does not fit.\nConverts to an <code>i8</code> if the value fits.\nConverts to an <code>i8</code>, wrapping if the value does not fit.\nIf the value is a finite number, converts it to an <code>Integer</code> …\nIf the value is a finite number, returns an <code>Integer</code> and …\nIf the value is finite, converts it to an <code>Integer</code> and …\nIf the value is finite, converts it to an <code>Integer</code> rounding …\nIf the value is a finite number, converts it to an <code>Integer</code> …\nIf the value is finite, converts it to an <code>Integer</code> applying …\nConverts to an <code>isize</code> if the value fits.\nConverts to an <code>isize</code>, wrapping if the value does not fit.\nIf the value is a finite number, returns a <code>Rational</code> number …\nIf the value is finite, converts it to a <code>Rational</code> number …\nReturns a string representation of <code>self</code> together with a …\nReturns a string representation of <code>self</code> together with a …\nReturns a string representation of the number for the …\nReturns a string representation for the specified <code>radix</code>.\nReturns a string representation of <code>self</code> for the specified …\nReturns a string representation of the value for the …\nReturns a string representation of <code>self</code> for the specified …\nReturns a string representation of the value for the …\nConverts to an <code>u128</code> if the value fits.\nConverts to a <code>u128</code>, wrapping if the value does not fit.\nConverts to an <code>u16</code> if the value fits.\nConverts to a <code>u16</code>, wrapping if the value does not fit.\nConverts to an <code>u32</code> if the value fits.\nConverts to a <code>u32</code>, rounding to the nearest.\nConverts to a <code>u32</code>, applying the specified rounding method.\nConverts to a <code>u32</code>, wrapping if the value does not fit.\nConverts to an <code>u64</code> if the value fits.\nConverts to a <code>u64</code>, wrapping if the value does not fit.\nConverts to an <code>u8</code> if the value fits.\nConverts to a <code>u8</code>, wrapping if the value does not fit.\nConverts to an <code>usize</code> if the value fits.\nConverts to a <code>usize</code>, wrapping if the value does not fit.\nToggles the bit at location <code>index</code>.\nReturns the total ordering between <code>self</code> and <code>other</code>.\nReturns the total ordering between <code>self</code> and <code>other</code>.\nRounds the number towards zero.\nRounds to the next integer towards zero.\nGets the integer and fractional parts of the number, …\nGets the integer and fractional parts of the number, …\nGets the integer and fractional parts of the number.\nGets the integer and fractional parts of the number, …\nRounds the number towards zero.\nRounds to the next integer towards zero.\nRounds the number towards zero.\nRounds to the next integer towards zero. The result may be …\nMultiplies <code>u</code> by 2<code>exp</code>.\nRaises <code>base</code> to the power of <code>exponent</code>.\nRaises <code>base</code> to the power of <code>exponent</code>.\nConstructs a new arbitrary-precision <code>Integer</code> with at least …\nCreate a new <code>Float</code> with the specified precision and with …\nCreate a new <code>Complex</code> number with the specified precision …\nCreate a new <code>Float</code> with the specified precision and with …\nCreate a new <code>Complex</code> number with the specified precision …\nCreate a new <code>Float</code> with the specified precision and with …\nCreate a new <code>Complex</code> number with the specified precision …\nCreate a new <code>Float</code> with the specified precision and with …\nCreate a new <code>Complex</code> number with the specified precision …\nWrites the absolute value into a slice of digits of type <code>T</code>…\nWrites the absolute value into a memory area of digits of …\nComputes the value of the second kind Bessel function of …\nComputes the value of the second kind Bessel function of …\nComputes the second kind Bessel function of order 0.\nComputes the value of the second kind Bessel function of …\nComputes the value of the second kind Bessel function of …\nComputes the value of the second kind Bessel function of …\nComputes the second kind Bessel function of order 1.\nComputes the value of the second kind Bessel function of …\nComputes the value of the second kind Bessel function of …\nComputes the value of the second kind Bessel function of …\nComputes the second kind Bessel function of order n.\nComputes the value of the second kind Bessel function of …\nComputes the value of the Riemann Zeta function on <code>self</code>, …\nComputes the value of the Riemann Zeta function on <code>self</code>, …\nComputes the Riemann Zeta function on the value.\nComputes the value of the Riemann Zeta function on <code>self</code>, …\nComputes the Riemann Zeta function on u.\nUsed to get a reference to a <code>Complex</code> number.\nA small complex number that does not require any memory …\nA complex number that supports total ordering and hashing.\nAn error which can be returned when parsing a <code>Complex</code> …\nThe <code>Prec</code> trait is used to specify the precision of the …\nThe <code>Prec64</code> trait is used to specify the precision of the …\nA small complex number that did not require any memory …\nExtracts the underlying <code>Complex</code>.\nExtracts the underlying <code>Complex</code>.\nReturns a mutable reference to a <code>Complex</code> number for simple …\nReturns a mutable reference to a <code>Complex</code> number for simple …\nBorrows the complex number.\nBorrows the complex number exclusively.\nGets a reference to <code>Complex</code> from a <code>BorrowComplex</code>.\nCreates a <code>MiniComplex</code> from two <code>MiniFloat</code> parts.\nCreates a <code>MiniComplex</code> from a <code>MiniFloat</code> real part.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a borrow from a raw MPC complex number.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>MiniComplex</code> with value 0 and the minimum possible\nCreates a <code>SmallComplex</code> with value 0 and the minimum …\nReturns the precision for the real and imaginary parts.\nReturns the precision for the real and imaginary parts.\nFree both local and global caches.\nRound away from zero.\nUsed to get a reference to a <code>Float</code>.\nCatalan’s constant, 0.915965…\nThe available floating-point constants.\nRound towards minus infinity.\nEuler’s constant, also known as the Euler-Mascheroni …\nSpecifies which cache to free.\nFree caches shared by all threads.\nPositive infinity.\nFree caches local to the current thread.\nThe logarithm of two, 0.693147…\nA small float that does not require any memory allocation.\nNot a number.\nRound towards the nearest, with ties rounding to even.\nNegative infinity.\nNegative zero.\nA float that supports total ordering and hashing.\nAn error which can be returned when parsing a <code>Float</code>.\nThe value of pi, π = 3.14159…\nThe rounding methods for floating-point values.\nA small float that did not require any memory allocation …\nSpecial floating-point values.\nTypes implementing this trait can be converted to <code>MiniFloat</code>…\nTypes implementing this trait can be converted to …\nRound towards plus infinity.\nRound towards zero.\nPositive zero.\nReturns the maximum allowed range for the exponent.\nExtracts the underlying <code>Float</code>.\nExtracts the underlying <code>Float</code>.\nReturns a mutable reference to a <code>Float</code> for simple …\nReturns a mutable reference to a <code>Float</code> for simple …\nBorrows the floating-point number.\nBorrows the floating-point number exclusively.\nGets a reference to <code>Float</code> from a <code>BorrowFloat</code>.\nCreates a <code>MiniFloat</code> from a <code>bool</code>.\nCreates a <code>MiniFloat</code> from an <code>f32</code>.\nCreates a <code>MiniFloat</code> from an <code>f64</code>.\nCreates a <code>MiniFloat</code> from a <code>i128</code>.\nCreates a <code>MiniFloat</code> from a <code>i16</code>.\nCreates a <code>MiniFloat</code> from a <code>i32</code>.\nCreates a <code>MiniFloat</code> from a <code>i64</code>.\nCreates a <code>MiniFloat</code> from a <code>i8</code>.\nCreates a <code>MiniFloat</code> from a <code>isize</code>.\nCreates a <code>MiniFloat</code> from a <code>Special</code> value.\nCreates a <code>MiniFloat</code> from a <code>u128</code>.\nCreates a <code>MiniFloat</code> from a <code>u16</code>.\nCreates a <code>MiniFloat</code> from a <code>u32</code>.\nCreates a <code>MiniFloat</code> from a <code>u64</code>.\nCreates a <code>MiniFloat</code> from a <code>u8</code>.\nCreates a <code>MiniFloat</code> from a <code>usize</code>.\nReturns the maximum value for the exponent.\nReturns the minimum value for the exponent.\nFrees various caches and memory pools that are used …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a borrow from a raw MPFR floating-point number.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>MiniFloat</code> with value 0 and the minimum possible …\nCreates a <code>SmallFloat</code> with value 0 and the minimum possible …\nReturns the maximum value for the precision.\nReturns the maximum value for the precision.\nReturns the minimum value for the precision.\nReturns the minimum value for the precision.\nReverses the rounding direction.\nUsed to get a reference to an <code>Integer</code>.\n<code>Integer</code> extension trait with 64-bit alternatives of some …\nWhether a number is prime.\nLeast significant digit first, with each digit in the …\nLeast significant digit first, with big endian digits.\nLeast significant digit first, with little endian digits.\nA small integer that does not require any memory …\nMost significant digit first, with each digit in the …\nMost significant digit first, with big endian digits.\nMost significant digit first, with little endian digits.\nThe number is definitely not prime.\nThe ordering of digits inside a slice, and bytes inside a …\nAn error which can be returned when parsing an <code>Integer</code>.\nThe number is probably prime.\nA small integer that did not require any memory allocation …\nTypes implementing this trait can be converted to …\nTypes implementing this trait can be converted to …\nAn error which can be returned when a checked conversion …\nConversions between <code>Integer</code> and a slice of digits of this …\nThe number is definitely prime.\nReturns a mutable reference to an <code>Integer</code> for simple …\nReturns a mutable reference to an <code>Integer</code> for simple …\nComputes the binomial coefficient over k.\nComputes the binomial coefficient over k.\nComputes the binomial coefficient over k.\nComputes the binomial coefficient n over k.\nBorrows the integer.\nBorrows the integer exclusively.\nGets a reference to <code>Integer</code> from a <code>BorrowInteger</code>.\nCreates a <code>MiniInteger</code> from a <code>bool</code>.\nCreates a <code>MiniInteger</code> from a <code>i128</code>.\nCreates a <code>MiniInteger</code> from a <code>i16</code>.\nCreates a <code>MiniInteger</code> from a <code>i32</code>.\nCreates a <code>MiniInteger</code> from a <code>i64</code>.\nCreates a <code>MiniInteger</code> from a <code>i8</code>.\nCreates a <code>MiniInteger</code> from a <code>isize</code>.\nCreates a <code>MiniInteger</code> from a <code>u128</code>.\nCreates a <code>MiniInteger</code> from a <code>u16</code>.\nCreates a <code>MiniInteger</code> from a <code>u32</code>.\nCreates a <code>MiniInteger</code> from a <code>u64</code>.\nCreates a <code>MiniInteger</code> from a <code>u8</code>.\nCreates a <code>MiniInteger</code> from a <code>usize</code>.\nReturns the number of one bits if the value ≥ 0.\nReturns the number of zero bits if the value &lt; 0.\nPerforms an exact division.\nPerforms an exact division.\nPerforms an exact division.\nComputes the double factorial of n.\nComputes the factorial of n.\nComputes the m-multi factorial of n.\nComputes a Fibonacci number, and the previous Fibonacci …\nComputes the Fibonacci number.\nReturns the location of the first one, starting at <code>start</code>. …\nReturns the location of the first zero, starting at <code>start</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a borrow from a raw GMP integer.\nFinds the greatest common divisor.\nFinds the greatest common divisor.\nFinds the greatest common divisor.\nReturns <code>true</code> if the bit at location <code>index</code> is 1 or <code>false</code> if …\nRetuns the Hamming distance if the two numbers have the …\nRaises <code>base</code> to the power of <code>exponent</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the number is congruent to c mod 2b, that …\nReturns <code>true</code> if the number is congruent to c mod divisor, …\nReturns <code>true</code> if the number is divisible by 2b.\nReturns <code>true</code> if the number is divisible by <code>divisor</code>. Unlike …\nKeeps the n least significant bits only, producing a …\nKeeps the n least significant bits only, producing a …\nKeeps the n least significant bits only, producing a …\nKeeps the n least significant bits only, producing a …\nKeeps the n least significant bits only, producing a …\nKeeps the n least significant bits only, producing a …\nFinds the least common multiple.\nFinds the least common multiple.\nFinds the least common multiple.\nComputes a Lucas number, and the previous Lucas number.\nComputes the Lucas number.\nReturns the modulo, or the remainder of Euclidean division …\nCreates a <code>MiniInteger</code> with value 0.\nCreates a <code>SmallInteger</code> with value 0.\nComputes the primorial of n.\nGenerates a random number with a specified maximum number …\nRemoves all occurrences of <code>factor</code>, and returns the number …\nRemoves all occurrences of <code>factor</code>, and returns the number …\nRemoves all occurrences of <code>factor</code>, and counts the number of\nComputes the nth root and truncates the result.\nComputes the nth root and truncates the result.\nComputes the nth root and truncates the result.\nComputes the nth root and returns the truncated root and …\nComputes the nth root and returns the truncated root and …\nComputes the nth root and returns the truncated root and …\nSets the bit at location <code>index</code> to 1 if <code>val</code> is <code>true</code> or 0 if …\nReturns the number of bits required to represent the value …\nReturns the number of bits required to represent the …\nConverts to an <code>f32</code> and an exponent, rounding towards zero.\nConverts to an <code>f64</code> and an exponent, rounding towards zero.\nToggles the bit at location <code>index</code>.\nRaises <code>base</code> to the power of <code>exponent</code>.\nCompound addition and assignment with a specified rounding …\nCompound addition and assignment to the rhs operand.\nCompound addition and assignment to the rhs operand with a …\nAssignment with a specified rounding method.\nCompound bitwise AND and assignment to the rhs operand.\nCompound bitwise OR and assignment to the rhs operand.\nCompound bitwise XOR and assignment to the rhs operand.\nCompletes an incomplete-computation value with a specified …\nThe type of the completed operation.\nCompound division and assignment with a specified rounding …\nCompound division and assignment to the rhs operand.\nCompound division and assignment to the rhs operand with a …\nRounding variants of division.\nCompound assignment and rounding variants of division.\nCompound assignment to the rhs operand and rounding …\nCompound multiplication and assignment with a specified …\nCompound multiplication and assignment to the rhs operand.\nCompound multiplication and assignment to the rhs operand …\nCompound negation and assignment.\nCompound bitwise complement and assignement.\nThe direction from rounding.\nThe direction from rounding.\nThe direction from rounding.\nThe direction from rounding.\nThe direction from rounding.\nThe direction from rounding.\nThe direction from rounding.\nThe direction from rounding.\nThe direction from rounding.\nThe direction from rounding.\nThe direction from rounding.\nThe direction from rounding.\nThe direction from rounding.\nThe direction from rounding.\nThe resulting type after the power operation.\nThe resulting type from the division operation.\nThe resulting type from the remainder operation.\nThe power operation.\nCompound power operation and assignment.\nCompound power operation and assignment with a specified …\nCompound power operation and assignment to the rhs operand.\nCompound power operation and assignment to the rhs operand …\nThe precision.\nCompound remainder operation and assignment with a …\nCompound remainder operation and assignment to the rhs …\nCompound remainder operation and assignment to the rhs …\nRounding variants of the remainder operation.\nCompound assignment and rounding variants of the remainder …\nCompound assignment to the rhs operand and rounding …\nThe rounding method.\nThe rounding method.\nThe rounding method.\nThe rounding method.\nThe rounding method.\nThe rounding method.\nThe rounding method.\nThe rounding method.\nThe rounding method.\nThe rounding method.\nThe rounding method.\nThe rounding method.\nThe rounding method.\nThe rounding method.\nCompound left shift and assignment to the rhs operand.\nCompound right shift and assignment to the rhs operand.\nCompound subtraction and assignment with a specified …\nCompound subtraction and assignment to the rhs operand.\nCompound subtraction and assignment to the rhs operand …\nPerforms the addition.\nPeforms the addition.\nPerforms the addition.\nPeforms the assignment.\nPeforms the AND operation.\nPeforms the OR operation.\nPeforms the XOR operation.\nCompletes the operation with the specified precision and …\nCompletes the operation and stores the result in a target …\nCompletes the operation with the specified precision and …\nCompletes the operation and stores the result in a target …\nPerforms the division.\nPerforms division, rounding the quotient up.\nPerforms division, rounding the quotient up.\nPerforms division, rounding the quotient up.\nPerforms Euclidean division, rounding the quotient so that …\nPerforms Euclidean division, rounding the quotient so that …\nPerforms Euclidean division, rounding the quotient so that …\nPerforms division, rounding the quotient down.\nPerforms division, rounding the quotient down.\nPerforms division, rounding the quotient down.\nPeforms the division.\nPerforms the division.\nPerforms division, rounding the quotient towards zero.\nPerforms division, rounding the quotient towards zero.\nPerforms division, rounding the quotient towards zero.\nPerforms the multiplication.\nPeforms the multiplication.\nPerforms the multiplication.\nPeforms the negation.\nPeforms the complement.\nPerforms the power operation.\nPeforms the power operation.\nPerforms the power operation.\nPeforms the power operation.\nPerforms the power operation.\nPerforms the remainder operation.\nFinds the remainder when the quotient is rounded up.\nFinds the remainder when the quotient is rounded up.\nFinds the remainder when the quotient is rounded up.\nFinds the positive remainder from Euclidean division.\nFinds the positive remainder from Euclidean division.\nFinds the positive remainder from Euclidean division.\nFinds the remainder when the quotient is rounded down.\nFinds the remainder when the quotient is rounded down.\nFinds the remainder when the quotient is rounded down.\nPeforms the remainder operation.\nPerforms the remainder operation.\nFinds the remainder when the quotient is rounded towards …\nFinds the remainder when the quotient is rounded towards …\nFinds the remainder when the quotient is rounded towards …\nPeforms the left shift.\nPeforms the right shift.\nPerforms the subtraction.\nPeforms the subtraction.\nPerforms the subtraction.\nUsed to pass the state of random number generators by …\nCustom random number generator to be used with <code>RandState</code>.\nThe state of a random number generator.\nCustom random number generator to be used with …\nThe state of a random number generator that is suitable …\nReturns a pointer to the inner GMP random generator.\nReturns a pointer to the inner GMP random generator.\nReturns an unsafe mutable pointer to the inner GMP random …\nReturns an unsafe mutable pointer to the inner GMP random …\nGenerates a random number below the given boundary value.\nGenerates a random number below the given boundary value.\nGenerates a random number with the specified number of …\nGenerates a random number with the specified number of …\nOptionally clones the random number generator.\nOptionally clones the random number generator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a random generator from an initialized GMP random …\nCreates a random generator from an initialized GMP random …\nGets a random 32-bit unsigned integer.\nGets a random 32-bit unsigned integer.\nGets up to 32 random bits.\nGets up to 32 random bits.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a random generator into Box&lt;dyn RandGen&gt; if …\nConverts a random generator into Box&lt;dyn ThreadRandGen&gt; if …\nConverts a random generator into a GMP random generator.\nConverts a random generator into a GMP random generator.\nCreates a new random generator with a compromise between …\nCreates a new custom random generator.\nCreates a new custom random generator.\nCreates a new custom random generator.\nCreates a new custom random generator.\nCreates a new random generator with a linear congruential …\nCreates a new random generator with a linear congruential …\nCreates a random generator with a Mersenne Twister …\nSeeds the random number generator.\nSeeds the random number generator.\nSeeds the random generator.\nSeeds the random generator.\nUsed to get a reference to a <code>Rational</code> number.\nA small rational number that does not require any memory …\nAn error which can be returned when parsing a <code>Rational</code> …\nA small rational number that did not require any memory …\nAn error which can be returned when a checked conversion …\nReturns a mutable reference to a <code>Rational</code> number for simple\nReturns a mutable reference to a <code>Rational</code> number for simple\nAssigns a numerator and denominator to a <code>MiniRational</code>, …\nAssigns a numerator and denominator to a <code>SmallRational</code>, …\nBorrows the rational number.\nBorrows the rational number exclusively.\nGets a reference to <code>Rational</code> from a <code>BorrowRational</code>.\nCreates a <code>MiniRational</code> from a <code>MiniInteger</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>MiniRational</code> from a numerator and denominator, …\nCreates a <code>SmallRational</code> from a numerator and denominator, …\nCreate a borrow from a raw GMP rational number.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>MiniRational</code> with value 0.\nCreates a <code>SmallRational</code> with value 0.")